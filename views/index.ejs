<!DOCTYPE html>
<html>
    <head>
        <link href="/css/index.css" rel="stylesheet">
        <script src="/socket.io/socket.io.js"></script>
        <title>Virtual Machine Controll Panel</title>
    </head>
    <body>
        <div class="my-contextmenu" id="contextmenu">
            <ul>
                <li><a href="javascript:void(0);" onclick="AddPort();">add port</a></li>
            </ul>
        </div>

        <div id="topmenu">
            <div id="title">
                <img src="/image/icon.png" height="50">
                Virtual Machine Controll Panel
            </div>
            <ul>
                <li><a href="#">Reset</a></li>
                <li><a href="#">Logout</a></li>
            </ul>
        </div>
        <div class="container">
            <div id="sidemenu" onContextmenu="return false;">
                <ul>
                    <li draggable="true" id="router">
                        <img src="/image/router.png">
                    </li>
                    <li draggable="true" id="switch">
                        <img src="/image/switch.png">
                    </li>
                    <li draggable="true" id="vps">
                        <img src="/image/vps.png">
                    </li>
                </ul>
            </div>
            <div id="uipanel" onContextmenu="return false;">
                <canvas id="canvasui" width="1000" height="550">

                </canvas>
            </div>
        </div>
        <div id="controlpanel">
            <div id="tabmenu">
            </div>
            <div id="log">

            </div>
        </div>
        <script>
            //let socket = io();

            /**
             * サイドメニューの機器アイコンをドラッグしたとき発火
             * 機器の種類を控えて, canvas上を若干透過する
             */
            function handleDragStart(e){
                e.dataTransfer.setData('machin', this.id); //idで機器の種類が取れる
                dropArea.style.opacity = 0.3;
            }

            /**
             * ドラッグが終了したときに発火
             * 透過されたcanvasを元に戻す
             */
            function handleDragEnd(e){
                dropArea.style.opacity = 1;
            }

            /**
             * canvas上に機器がドラッグされたときに発火
             * 機器に対応したurlにajax通信でPOSTしcanvas上に描画をする
             * 同時にinUseMachinリストに機器のオブジェクトを格納する
             */
            function handleDrop(e){
                let img = new Image();
                let type = e.dataTransfer.getData('machin');
                let x = e.clientX - canvas.getBoundingClientRect().left;
                let y = e.clientY - canvas.getBoundingClientRect().top;
                let params = new URLSearchParams();
                params.append("x", x);
                params.append("y", y);
                let url = ""
                if (type== "router"){
                    img.src = ROUTER_SRC;
                    url = "/machine/router/add";
                }
                else if (type == "switch"){
                    img.src = SWITCH_SRC;
                    url = "/machine/switch/add";
                }
                else if (type == "vps"){
                    img.src = VM_SRC;
                    url = "/machine/vm/add";
                }
                let req = new Request(url, {
                    method: "post",
                    body: params
                });
                fetch(req)
                .then(response =>{
                    return response.json();
                }).then(json => {
                    if (json.status == 0){
                        inUseMachines.push(new Machine(img, json.id, json.name, "", type, x, y));
                        canvasReDraw();
                    }
                    Stdout(json.log);
                });
                //socket.emit('addmachine', machine);
            }
            
            //機器の画像パスの定数
            const ROUTER_SRC = "/image/router.png";
            const SWITCH_SRC = "/image/switch.png";
            const VM_SRC = "/image/vps.png";

            //ここからDnDのイベント登録
            var cols = document.querySelectorAll('#sidemenu ul li');
            [].forEach.call(cols, function(col) {
                col.addEventListener('dragstart', handleDragStart, false);
                col.addEventListener('dragend', handleDragEnd, false);
            });
            var dropArea = document.getElementById("uipanel");
            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
            }, false);
            dropArea.addEventListener('drop', handleDrop, false);
            //DnDのイベント登録ここまで

            /**
             * canvas上でクリックされたら発火
             * クリックされた座標に機器があれば移動変数moveMachineにぶち込む
             */
            function handleCanvasOnDown(e){
                if (wait_select_port){
                    wait_select_port = false;
                    canvasReDraw();
                }
                let offsetX = canvas.getBoundingClientRect().left;
                let offsetY = canvas.getBoundingClientRect().top;
                let x = e.clientX - offsetX;
                let y = e.clientY - offsetY;
                if (vethDrawing){
                    inUseMachines.forEach(function(machine){
                        if (checkLoacationOverMachin(machine, x, y)){
                            contextMenu.style.left = (x + offsetX)+'px';
                            contextMenu.style.top = (y + offsetY)+'px';
                            contextMenu.classList.add('show');
                            let ports = []; //検索結果に当てはまるポートを格納
                            inUsePorts.forEach(function(port){
                                if (port.machine_id == machine.id)
                                    ports.push(port);
                            });

                            let html = "<ul>";
                            for (i = 0;i < ports.length;i++){
                                // if (machine.port.status == 2)
                                //     html += '<li color="green">Ethernet' + i + ' 接続中</li>';
                                // else
                                    html += '<li><a href="javascript:void(0);" onclick="addVeth(' + "'" + ports[i].id + "')" + '";">Ethernet' + i + '</a></li>';
                            }
                            html += "</ul>"
                            contextMenu.innerHTML = html;
                            canvasDragging = false;
                            vethDrawing = false;
                            wait_select_port = true;
                        }
                    });
                    //canvasReDraw();
                    return;
                }
                inUseMachines.forEach(function(machine){
                    if (checkLoacationOverMachin(machine, x, y)){
                        canvasDragging = true; //trueの間だけ動かせる
                        relX = machine.x - x;
                        relY = machine.y -y;
                        moveMachine = machine; //ここにぶちこんだやつが動く
                    }
                });
            }

            /**
             * canvas上でマウスカーソルが動いたら発火する
             * canvasDraggingをつかってドラックでmoveMachinの機器を動かせる
             * vethDrawingがtrueのときport追加モード
             */
            function handleCanvasOnMove(e){
                let offsetX = canvas.getBoundingClientRect().left;
                let offsetY = canvas.getBoundingClientRect().top;
                let x = e.clientX - offsetX;
                let y = e.clientY - offsetY;
                if (canvasDragging){
                    moveMachine.x = x + relX;
                    moveMachine.y = y + relY;
                    canvasReDraw();
                }
                if (vethDrawing){
                    canvasReDraw();
                    begin_x = now_context.x + now_context.img.naturalWidth / 2;
                    begin_y = now_context.y + now_context.img.naturalHeight / 2;
                    context.beginPath();
                    context.moveTo(begin_x, begin_y);
                    context.lineTo(x, y);
                    context.stroke();
                }
            }

            /**
             * canvas上でクリックをやめたら発火
             * canvasDraggingをfalseにし動けなくする
             */
            function handleCanvasOnUp(e){
                canvasDragging = false;
            }

            function handleCanvasDoubleClick(e){
                console.log('double click');
            }

            /**
             * 現在の座標が機器の上か確認
             * @param {machine} machine 検証する機器オブジェクト
             * @param {number} x x座標
             * @param {number} y y座標
             */
            function checkLoacationOverMachin(machine, x, y){
                if (machine.x < x && (machine.img.naturalWidth + machine.x) > x && machine.y < y && (machine.img.naturalHeight + machine.y) > y)
                    return true;
                else
                return false;
            }

            /**
             * canvasを再描画する
             */
            function canvasReDraw(){
                context.clearRect(0, 0, canvas.width, canvas.height);
                inUseVeths.forEach(function(veth){
                    const port1_machine_id = inUsePorts.filter(port => port.id == veth.port1_id)[0].machine_id;
                    const machine1 = inUseMachines.filter(machine => machine.id == port1_machine_id)[0];
                    const port2_machine_id = inUsePorts.filter(port => port.id == veth.port2_id)[0].machine_id;
                    const machine2 = inUseMachines.filter(machine => machine.id == port2_machine_id)[0];
                    context.beginPath();
                    context.moveTo(machine1.x+machine1.img.naturalWidth/2, machine1.y+machine1.img.naturalHeight/2);
                    context.lineTo(machine2.x+machine2.img.naturalWidth/2, machine2.y+machine2.img.naturalHeight/2);
                    context.stroke();
                });
                inUseMachines.forEach(function(machine){
                    context.drawImage(machine.img, machine.x, machine.y);
                });
            }

            //ここからcanvas上のイベント登録
            const canvas = document.getElementById("canvasui");
            let context = canvas.getContext('2d');
            canvas.addEventListener('mousedown', handleCanvasOnDown, false);
            canvas.addEventListener('mousemove', handleCanvasOnMove, false);
            canvas.addEventListener('mouseup', handleCanvasOnUp, false);
            canvas.addEventListener('dblclick', handleCanvasDoubleClick, false);
            let canvasDragging = false;
            let inUseMachines = [] //登録された機器を格納
            let inUsePorts = [] //登録されたポートを格納
            let inUseVeths = [] //登録されたケーブルを格納
            let relX, relY;
            let moveMachine;
            //canvas上のイベント登録ここまで

            /**
             * 機器上で右クリックしたときに独自のコンテキストメニューを出す処理
             */
            let contextMenu = document.getElementById('contextmenu');
            let now_context = "";
            let current_select_port; //始点ポート
            let end_point_port; //終端ポート
            let begin_x = 0;
            let begin_y = 0;
            let end_x = 0;
            let end_y = 0;
            let vethDrawing = false; //trueのとき線描画モード
            let wait_select_port = false; //trueのときport選択待ち
            canvas.addEventListener('contextmenu', function(e){
                if (vethDrawing){
                    vethDrawing = false;
                    canvasReDraw();
                }
                let offsetX = canvas.getBoundingClientRect().left;
                let offsetY = canvas.getBoundingClientRect().top;
                let x = e.clientX - offsetX;
                let y = e.clientY - offsetY;
                inUseMachines.forEach(function(machine){
                    if (checkLoacationOverMachin(machine, x, y)){
                        contextMenu.style.left = (x + offsetX)+'px';
                        contextMenu.style.top = (y + offsetY)+'px';
                        contextMenu.classList.add('show');
                        let ports = []; //検索結果に当てはまるポートを格納
                        inUsePorts.forEach(function(port){
                            if (port.machine_id == machine.id)
                                ports.push(port);
                        });

                        let html = "<ul>";
                        for (i = 0;i < ports.length;i++){
                            // if (machine.port.status == 2)
                            //     html += '<li color="green">Ethernet' + i + ' 接続中</li>';
                            // else
                                html += '<li><a href="javascript:void(0);" onclick="connectPort(' + "'" + ports[i].id + "')" + '";">Ethernet' + i + '</a></li>';
                        }
                        html += '<li><a href="javascript:void(0);" onclick="addPort(' + "'" + machine.id + "')" + '";">ポートを追加</a></li>'
                        html += "</ul>"
                        contextMenu.innerHTML = html;
                        canvasDragging = false;
                        now_context = machine;
                        return;
                    }
                });
            }, false);
            document.body.addEventListener('click',function(){
                if(contextMenu.classList.contains('show') && !vethDrawing && !wait_select_port) {
                    console.log("remove");
                    contextMenu.classList.remove('show');
                }
            });
            //コンテキストメニューここまで
            
            function addPort(id){
                let params = new URLSearchParams();
                params.append("id", id);
                let req = new Request("/machine/port/add", {
                    method: "post",
                    body: params
                });
                fetch(req)
                .then(response =>{
                    return response.json();
                }).then(json => {
                    if (json.status == 0){
                        inUsePorts.push(new Port(json.id, id, json.number, "", ""));
                    }
                    Stdout(json.log);
                });

            }

            function addVeth(id){
                console.log(current_select_port);
                console.log(id);
                let params = new URLSearchParams();
                params.append("port1", current_select_port.id);
                params.append("port2", id);
                let req = new Request("/machine/veth/add", {
                    method: "post",
                    body: params
                });
                fetch(req)
                .then(response =>{
                    return response.json();
                }).then(json => {
                    if (json.status == 0){
                        inUseVeths.push(new Veth(json.id, current_select_port.id, id));
                    }
                    Stdout(json.log);
                });
            }

            function connectPort(port_id){
                wait_select_port = false;
                inUsePorts.forEach(function(port){
                    if (port.id == port_id)
                        current_select_port = port;
                });
                console.log(current_select_port.id);
                vethDrawing = true;
                contextMenu.classList.remove('show');
            }



            function Machine(img, id, name, description, type, x, y){
                this.img = img;
                this.id = id
                this.name = name;
                this.description = description;
                this.type = type;
                this.x = x;
                this.y = y;
            }

            function Port(id ,machine_id, number, ip_address, mac_address){
                this.id = id;
                this.machine_id = machine_id;
                this.number = number;
                this.ip_address = ip_address;
                this.mac_address = mac_address;
            }

            function Veth(id, port1_id, port2_id){
                this.id = id;
                this.port1_id = port1_id;
                this.port2_id = port2_id;
            }


            /**
             * 指定されたurlにPOSTする
             * POST後ログエリアに結果を表示
             * @param {string} url url
             * @param {URLSearchParams} 送信データ
             */
            function PostRequest(url, params){
                let req = new Request(url, {
                    method: "post",
                    body: params
                });
                fetch(req)
                .then(response =>{
                    return response.json();
                }).then(json => {
                    new Machine
                    Stdout(json.log);
                });
            }
            
            const log = document.getElementById("log");
            /**
             * ログエリアにログを追記する
             * @param {string} str 追記する出力文字
             */
            function Stdout(str){
                log.insertAdjacentHTML('beforeend', str + '<br>');
            }

            /**
             * ログエリアにエラーログを追記する
             * @param {string} str 追記する出力文字
             */
            function Stderr(str){

            }
        </script>
    </body>
</html>